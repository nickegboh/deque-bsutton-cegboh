{{{
// ----------------------------
// projects/deque/TestDeque.c++
// Copyright (C) 2010
// Glenn P. Downing
// ----------------------------

/*
To test the program:
% g++ -ansi -pedantic -lcppunit -ldl -Wall TestDeque.c++ -o TestDeque.app
% valgrind TestDeque.app >& TestDeque.out
*/

// --------
// includes
// --------

#include <algorithm> // copy, count, fill, reverse
#include <deque> // deque
#include <memory> // allocator

#include "cppunit/extensions/HelperMacros.h" // CPPUNIT_TEST, CPPUNIT_TEST_SUITE, CPPUNIT_TEST_SUITE_END
#include "cppunit/TestFixture.h" // TestFixture
#include "cppunit/TestSuite.h" // TestSuite
#include "cppunit/TextTestRunner.h" // TestRunner

#include "Deque.h"

// ---------
// TestDeque
// ---------

template <typename C>
struct TestDeque : CppUnit::TestFixture {
    // ----------------
    // test_constructor
    // ----------------

    void test_constructor () {
        
        using namespace std;
        cout << "test_constructor" << endl;
        const C x;
        const C y(10);
        const C z(10, 2);
        const C t = z;
        const C a;
        const C b(1000);
        const C c(100, 20);
        const C d = c;
        const C e;
        const C f(2);
        const C g(2, 2);
        const C h = g;
        //cout << "done constructor" << endl; 
}

    // -------------
    // test_equality
    // -------------

    void test_equality () {
        using namespace std;
        cout <<"test_equality" << endl;
        const C x(10, 2);
        const C y(10, 2);
        assert(x == y);
        assert(!(x != y));
        const C a(1000, 20);
        const C b(1000, 20);
        assert(a == b);
        assert(!(a != b));
        const C c(100, 18);
        const C d(c);
        assert(c == d);
        assert(!(c != d));
        const C e(2, 2);
        const C f = e;
        assert(e == f);
        assert(!(e != f));
        }

    // ---------------
    // test_comparison
    // ---------------

    void test_comparison () {
        using namespace std;
        cout<<"test_comparison" << endl;
        const C x(10, 2);
        const C y(20, 3);
        assert(x < y);
        assert(!(x >= y));
        assert(y > x);
        assert(!(y <= x));
        const C a(10, 3);
        const C b(20, 3);
        assert(a < b);
        assert(!(a >= b));
        assert(b > a);
        assert(!(b <= a));
        const C c(1000, 2);
        const C d(2000, 3);
        assert(c < d);
        assert(!(c >= d));
        assert(d > c);
        assert(!(d <= c));
        const C e(100, 2);
        const C f(18, 3);
        assert(e < f);
        assert(!(e >= f));
        assert(f > e);
        assert(!(f <= e));
        //cout << "done comparison" << endl;
        }

    // ---------------
    // test_assignment
    // ---------------

    void test_assignment () {
        using namespace std;
        cout<<"test assignment" << endl;
              C x(10, 2);
        const C y(20, 3);
        x = y;
              C a(1000, 20);
        const C b(2000, 18);
        a = b;
              C c(18, 12);
        const C d(2, 30);
        c = d;
              C e(10, 2);
        const C f(20, 3);
        e = f;
        //cout<<"done assignent" << endl;
        }

    // --------------
    // test_subscript
    // --------------

    void test_subscript () {
        using namespace std;
        cout <<"test subscript"<<endl;
              C x(10, 2);
        const C y(10, 2);
        typename C::reference v = x[0];
        typename C::const_reference w = y[0];
        assert(v == w);
              C a(1000, 2);
        const C b(1000, 2);
        typename C::reference g = a[999];
        typename C::const_reference j = b[999];
        assert(g == j);
              C c(18, 34);
        const C d(18, 34);
        typename C::reference h = c[6];
        typename C::const_reference k = d[6];
        assert(k == h);
              C e(2, 2);
        const C f(2, 2);
        typename C::reference i = e[0];
        typename C::const_reference l = f[0];
        assert(l == i);
        }

    // -------
    // test_at
    // -------

    void test_at () {
        using namespace std;
        cout << "test at" << endl;
              C x(10, 2);
        const C y(10, 2);
        typename C::reference v = x.at(0);
        typename C::const_reference w = y.at(0);
        assert(v == w);
              C a(1000, 2);
        const C b(1000, 2);
        typename C::reference g = a.at(999);
        typename C::const_reference j = b.at(999);
        assert(g == j);
              C c(18, 34);
        const C d(18, 34);
        typename C::reference h = c.at(6);
        typename C::const_reference k = d.at(6);
        assert(k == h);
              C e(2, 2);
        const C f(2, 2);
        typename C::reference i = e.at(0);
        typename C::const_reference l = f.at(0);
        assert(l == i);}

    // ---------
    // test_back
    // ---------

    void test_back () {
        using namespace std;
        cout <<"test back" << endl;
              C x(10, 2);
        const C y(10, 2);
        typename C::reference v = x.back();
        typename C::const_reference w = y.back();
        //cout << "v: " << v << "w: " << w << endl;
                assert(v == w);
              C a(1000, 2);
        const C b(1000, 2);
        typename C::reference g = a.back();
        typename C::const_reference j = b.back();
        assert(g == j);
              C c(18, 34);
        const C d(18, 34);
        typename C::reference h = c.back();
        typename C::const_reference k = d.back();
        assert(k == h);
              C e(2, 2);
        const C f(2, 2);
        typename C::reference i = e.back();
        typename C::const_reference l = f.back();
        assert(l == i);}

    // ----------
    // test_begin
    // ----------

    void test_begin () {
        using namespace std;
        cout <<"test begin" << endl;
              C x(10, 2);
        const C y(10, 2);
        typename C::iterator p = x.begin();
        typename C::const_iterator q = y.begin();
        assert(*p == *q);
              C a(1000, 2);
        const C b(1000, 2);
        typename C::iterator h = a.begin();
        typename C::const_iterator i = b.begin();
        assert(*h == *i);
              C c(18, 34);
        const C d(18, 34);
        typename C::iterator j = a.begin();
        typename C::const_iterator k = b.begin();
        assert(*j == *k);
              C e(2, 2);
        const C f(2, 2);
        typename C::iterator l = a.begin();
        typename C::const_iterator m = b.begin();
        //cout << "p: " << *p << " q: " << *q << endl;
        assert(*l == *m);}

    // ----------
    // test_clear
    // ----------

    void test_clear () {
        using namespace std;
        cout <<"test clear" << endl;
        C x(10, 2);
        x.clear();
        assert(x.empty());
        C a(10000, 2);
        a.clear();
        assert(a.empty());
        C b(18, 34);
        b.clear();
        assert(b.empty());
        C c(2, 2);
        c.clear();
        assert(c.empty());
       C d;
        d.clear();
        assert(d.empty());}

    // ----------
    // test_empty
    // ----------

    void test_empty () {
        using namespace std;
        cout << "test empty" << endl;
        const C x;
        const bool b = x.empty();
        assert(b);
        const C y = x;
        const bool c = y.empty();
        assert(c);}

    // --------
    // test_end
    // --------

    void test_end () {
        using namespace std;
        cout << "test end" << endl;
              C x(10, 2);
        const C y(10, 2);
        typename C::iterator p = x.end();
        typename C::const_iterator q = y.end();
        //cout << "*p: " << *p  << " *q: " << *q << endl;
        assert(*p == *q);
              C a(1000, 2);
        const C b(1000, 2);
        typename C::iterator h = a.end();
        typename C::const_iterator i = b.end();
        assert(*h == *i);
              C c(18, 34);
        const C d(18, 34);
        typename C::iterator j = a.end();
        typename C::const_iterator k = b.end();
        assert(*j == *k);
              C e(2, 2);
        const C f(2, 2);
        typename C::iterator l = a.end();
        typename C::const_iterator m = b.end();
        //cout << "p: " << *p << " q: " << *q << endl;
        assert(*l == *m);}

    // ----------
    // test_erase
    // ----------

    void test_erase () {
        using namespace std;
        cout << "test erase" << endl;
        C x(10, 2);
        typename C::iterator p = x.erase(x.begin());
        assert(p == x.begin());
        C a(1000, 2);
        for(int i = 0; i < 500; i ++) p = a.erase(a.begin());
        assert(p == a.begin());
        C b(18, 34);
        for(int i = 0; i < 2; i++) p = b.erase(b.begin());
        assert(p == b.begin());
        C c(10, 2);
        p = c.erase(c.begin());
        assert(p == c.begin());}

    // ----------
    // test_front
    // ----------

    void test_front () {
        using namespace std;
        cout << "test front" << endl;
              C x(10, 2);
        const C y(10, 2);
        typename C::reference v = x.front();
        typename C::const_reference w = y.front();
        assert(v == w);
              C a(1000, 2);
        const C b(1000, 2);
        typename C::reference g = a.front();
        typename C::const_reference j = b.front();
        assert(g == j);
              C c(18, 34);
        const C d(18, 34);
        typename C::reference h = c.front();
        typename C::const_reference k = d.front();
        assert(k == h);
              C e(2, 2);
        const C f(2, 2);
        typename C::reference i = e.front();
        typename C::const_reference l = f.front();
        assert(l == i);}

    // -----------
    // test_insert
    // -----------

    void test_insert () {
        using namespace std;
        cout << "test instert" << endl;
        C x(10, 2);
        typename C::iterator p = x.insert(x.begin(), 3);
        assert(p == x.begin());
        C a(1000, 2);
        for(int i = 0; i < 12; i ++) p = a.insert(a.begin(),18);
        assert(p == a.begin());
        C b(18, 34);
        for(int i = 0; i < 2; i++) p = b.insert(b.begin(),27);
        assert(p == b.begin());
        C c(2, 2);
        p = c.insert(c.begin(),1);
        assert(p == c.begin());}

    // -------------
    // test_pop_back
    // -------------

    void test_pop_back () {
        using namespace std;
        cout << "test popback" << endl;
        C x(10, 2);
        x.pop_back();}

    // --------------
    // test_push_back
    // --------------

    void test_push_back () {
        using namespace std;
        cout << "test push back" << endl;
        C x(10, 2);
        x.push_back(3);}

    // -----------
    // test_resize
    // -----------

    void test_resize () {
        using namespace std;
        cout << "resize" << endl;
        C x(10, 2);
        x.resize(20);
        x.resize(30, 3);
        x.resize(10);
        x.resize(1000,3);
        x.resize(100);
        x.resize(100);
        }


    // ---------
    // test_size
    // ---------

    void test_size () {
        using namespace std;
        cout << "size" << endl;
        C x;
        assert(x.size() == 0);
        x.resize(20);
        assert(x.size() == 20);
        x.resize(30, 3);
        assert(x.size() == 30);
        x.resize(10);
        assert(x.size() == 10);
        x.resize(1000,3);
        assert(x.size() == 1000);
        x.resize(100);
        assert(x.size() == 100);
        x.resize(100);
        assert(x.size() == 100);}

    // ---------
    // test_swap
    // ---------

    void test_swap () {
        C x(10, 2);
        C y(20, 3);
        x.swap(y);
        C a(1000, 2);
        C b(18, 34);
        a.swap(b);
        C c(2, 2);
        C d(12, 13);
        c.swap(d);
        C e(100, 99);
        C f(1, 3);
        e.swap(f);}

    // -------------
    // test_iterator
    // -------------

    void test_iterator () {
        C x(10, 2);
        typename C::iterator b = x.begin();
        assert(b == x.begin());
        typename C::reference v = *b;
        ++b;
        b += 2;
        --b;
        b -= 2;
        typename C::reference w = *b;
        assert(v == w);}

    // -------------------
    // test_const_iterator
    // -------------------

    void test_const_iterator () {
        const C x(10, 2);
        typename C::const_iterator b = x.begin();
        assert(b == x.begin());
        typename C::const_reference v = *b;
        ++b;
        b += 2;
        --b;
        b -= 2;
        typename C::const_reference w = *b;
        assert(v == w);}

    // ---------------
    // test_algorithms
    // ---------------

    void test_algorithms () {
              C x(10, 2);
        const C y(10, 2);
        assert(std::count(y.begin(), y.end(), 3) == 0);
        std::copy(y.begin(), y.end(), x.begin());
        std::fill(x.begin(), x.end(), 2);
        std::reverse(x.begin(), x.end());}

    // -----
    // suite
    // -----

    CPPUNIT_TEST_SUITE(TestDeque);
    CPPUNIT_TEST(test_constructor);
    CPPUNIT_TEST(test_equality);
    CPPUNIT_TEST(test_comparison);
    CPPUNIT_TEST(test_assignment);
    CPPUNIT_TEST(test_subscript);
    CPPUNIT_TEST(test_at);
    CPPUNIT_TEST(test_back);
    CPPUNIT_TEST(test_begin);
    CPPUNIT_TEST(test_clear);
    CPPUNIT_TEST(test_empty);
    CPPUNIT_TEST(test_end);
    CPPUNIT_TEST(test_erase);
    CPPUNIT_TEST(test_front);
    CPPUNIT_TEST(test_insert);
    CPPUNIT_TEST(test_pop_back);
    CPPUNIT_TEST(test_push_back);
    CPPUNIT_TEST(test_resize);
    CPPUNIT_TEST(test_size);
    CPPUNIT_TEST(test_swap);
    CPPUNIT_TEST(test_iterator);
    CPPUNIT_TEST(test_const_iterator);
    CPPUNIT_TEST(test_algorithms);
    CPPUNIT_TEST_SUITE_END();};

// ----
// main
// ----

int main () {
    using namespace std;
    ios_base::sync_with_stdio(false); // turn off synchronization with C I/O
    cout << "TestDeque.c++" << endl;

    CppUnit::TextTestRunner tr;
    //tr.addTest(TestDeque< std::deque<int> >::suite());
    //tr.addTest(TestDeque< std::deque<int, std::allocator<int> > >::suite());
    tr.addTest(TestDeque< Deque<int> >::suite());
    //tr.addTest(TestDeque< Deque<int, std::allocator<int> > >::suite());
    tr.run();

    cout << "Done." << endl;
    return 0;}
}}}